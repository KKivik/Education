#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <list>
#include <set>

using namespace std;

class Node {
public:
    char data;
    Node* next;
    Node* prev;

public:
    Node(char data) {
        this->data = data;
        this->next = NULL;
        this->prev = NULL;
    }
};

class OneLinkedList {
public:
    Node* head, * tail;

public:
    OneLinkedList() {
        this->head = this->tail = NULL;
    }

    ~OneLinkedList() {
        while (head != NULL) pop_front();
    }

    void pop_front() {
        if (head == NULL) return;

        if (head == tail) {
            delete tail;
            head = tail = NULL;
            return;
        }

        Node* node = head;
        head = node->next;
        head->prev = NULL;
        delete node;
    }

    void push_back(char data) {
        Node* node = new Node(data);
        if (head == NULL) head = node;
        if (tail != NULL) {
            tail->next = node;
            node->prev = tail;
        }
        tail = node;
    }

    void pop_current(Node* node) {
        if (node->prev->prev == NULL) {
            if (node->next != NULL) {
                node->next->prev = NULL;
                head = node->next;
                delete node->prev;
                delete node;
            }
            else {
                node->next->prev = NULL;
                head = node->next;
                delete node->prev;
                delete node;
            }
        }
        else {
            if (node->next != NULL) {
                node->prev->prev->next = node->next;
                node->next->prev = node->prev->prev;
                delete node->prev;
                delete node;
            }
            else {
                node->prev->prev->next = NULL;
                delete node->prev;
                delete node;
            }
        }
    }

    void copy_current(Node* node) {
        Node* cop = new Node(node->prev->data);
        cop->next = node;
        cop->prev = node->prev;
        node->prev->next = cop;
        node->prev = cop;
    }

};

int main() {
    OneLinkedList lst;
    string s;
    cin >> s;
    int n;
    cin >> n;
    int cnt = 0;
    for (char c : s) {
        if (c != '?' && c != '*') {
            cnt++;
        }
        lst.push_back(c);
    }
    if (cnt == n) {
        for (Node* node = lst.head; node != NULL; node = node->next) {
            if (node->data != '*' && node->data != '?') {
                std::cout << node->data;
            }
        }
        return 0;
    }
    else if (cnt > n) {
        Node* node = lst.head;
        while (node != NULL && cnt > n) {
            if (node->data == '*' || node->data == '?') {
                lst.pop_current(node);
                cnt--;
            }
            node = node->next;
        }
        if (cnt > n) {
            cout << "Impossible";
            return 0;
        }
    }
    else {
        Node* node = lst.head;
        while (node != NULL && cnt < n) {
            if (node->data == '*') {
                while (cnt < n) {
                    lst.copy_current(node);
                    cnt++;
                }
            }
            node = node->next;
        }
        if (cnt < n) {
            cout << "Impossible";
            return 0;
        }
    }
    /*cout << cnt;*/

    for (Node* node = lst.head; node != NULL; node = node->next) {
        if (node->data != '*' && node->data != '?') {
            std::cout << node->data;
        }
    }
    return 0;
}
